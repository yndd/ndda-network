/*
Package ygotndda is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/tmp/ygot/genutil/names.go
using the following YANG input files:
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/ndda-common.yang
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/ndda-if-si-addressinfo.yang
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/ndda-if-subinterface.yang
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/ndda-interface.yang
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/ndda-network-instance.yang
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/ndda-system-platform.yang
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/ndda-system.yang
Imported modules were sourced from:
	- /Users/henderiw/CodeProjects/yang/ndda/0_1_0/combined/...
*/
package ygotndda

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interface       map[string]*NddaInterface_Interface             `path:"interface" module:"ndda-interface"`
	NetworkInstance map[string]*NddaNetworkInstance_NetworkInstance `path:"network-instance" module:"ndda-network-instance"`
	System          *NddaSystem_System                              `path:"system" module:"ndda-system"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*NddaInterface_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NddaInterface_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NddaInterface_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateInterface(Name string) *NddaInterface_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetInterface(Name string) *NddaInterface_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NddaInterface_Interface struct to the
// list Interface of Device. If the key value(s) specified in
// the supplied NddaInterface_Interface already exist in the list, an error is
// returned.
func (t *Device) AppendInterface(v *NddaInterface_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NddaInterface_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewNetworkInstance(Name string) (*NddaNetworkInstance_NetworkInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NddaNetworkInstance_NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &NddaNetworkInstance_NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateNetworkInstance(Name string) *NddaNetworkInstance_NetworkInstance {

	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetNetworkInstance(Name string) *NddaNetworkInstance_NetworkInstance {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied NddaNetworkInstance_NetworkInstance struct to the
// list NetworkInstance of Device. If the key value(s) specified in
// the supplied NddaNetworkInstance_NetworkInstance already exist in the list, an error is
// returned.
func (t *Device) AppendNetworkInstance(v *NddaNetworkInstance_NetworkInstance) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NddaNetworkInstance_NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateSystem() *NddaSystem_System {
	if t.System != nil {
		return t.System
	}
	t.System = &NddaSystem_System{}
	return t.System
}

// GetSystem returns the value of the System struct pointer
// from Device. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetSystem() *NddaSystem_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Device
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Device) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.System.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NddaInterface_Interface represents the /ndda-interface/interface YANG schema element.
type NddaInterface_Interface struct {
	Config       *NddaInterface_Interface_Config                  `path:"config" module:"ndda-interface"`
	Name         *string                                          `path:"name" module:"ndda-interface"`
	Subinterface map[uint32]*NddaInterface_Interface_Subinterface `path:"subinterface" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// NddaInterface_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NddaInterface_Interface) NewSubinterface(Index uint32) (*NddaInterface_Interface_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*NddaInterface_Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &NddaInterface_Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver NddaInterface_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NddaInterface_Interface) GetOrCreateSubinterface(Index uint32) *NddaInterface_Interface_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of NddaInterface_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NddaInterface_Interface) GetSubinterface(Index uint32) *NddaInterface_Interface_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubinterface deletes the value with the specified keys from
// the receiver NddaInterface_Interface. If there is no such element, the function
// is a no-op.
func (t *NddaInterface_Interface) DeleteSubinterface(Index uint32) {
	key := Index

	delete(t.Subinterface, key)
}

// AppendSubinterface appends the supplied NddaInterface_Interface_Subinterface struct to the
// list Subinterface of NddaInterface_Interface. If the key value(s) specified in
// the supplied NddaInterface_Interface_Subinterface already exist in the list, an error is
// returned.
func (t *NddaInterface_Interface) AppendSubinterface(v *NddaInterface_Interface_Subinterface) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*NddaInterface_Interface_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *NddaInterface_Interface) GetOrCreateConfig() *NddaInterface_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &NddaInterface_Interface_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from NddaInterface_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddaInterface_Interface) GetConfig() *NddaInterface_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	for _, e := range t.Subinterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NddaInterface_Interface struct, which is a YANG list entry.
func (t *NddaInterface_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NddaInterface_Interface_Config represents the /ndda-interface/interface/config YANG schema element.
type NddaInterface_Interface_Config struct {
	Kind         E_NddaCommon_InterfaceKind `path:"kind" module:"ndda-interface"`
	Lacp         *bool                      `path:"lacp" module:"ndda-interface"`
	LacpFallback *bool                      `path:"lacp-fallback" module:"ndda-interface"`
	Lag          *bool                      `path:"lag" module:"ndda-interface"`
	LagMember    *bool                      `path:"lag-member" module:"ndda-interface"`
	LagName      *string                    `path:"lag-name" module:"ndda-interface"`
	Name         *string                    `path:"name" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Config) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaInterface_Interface_Subinterface represents the /ndda-interface/interface/subinterface YANG schema element.
type NddaInterface_Interface_Subinterface struct {
	Config *NddaInterface_Interface_Subinterface_Config          `path:"config" module:"ndda-interface"`
	Index  *uint32                                               `path:"index" module:"ndda-interface"`
	Ipv4   map[string]*NddaInterface_Interface_Subinterface_Ipv4 `path:"ipv4" module:"ndda-interface"`
	Ipv6   map[string]*NddaInterface_Interface_Subinterface_Ipv6 `path:"ipv6" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface) IsYANGGoStruct() {}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NddaInterface_Interface_Subinterface struct. The keys of the list are populated from the input
// arguments.
func (t *NddaInterface_Interface_Subinterface) NewIpv4(IpPrefix string) (*NddaInterface_Interface_Subinterface_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[string]*NddaInterface_Interface_Subinterface_Ipv4)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NddaInterface_Interface_Subinterface_Ipv4{
		IpPrefix: &IpPrefix,
	}

	return t.Ipv4[key], nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NddaInterface_Interface_Subinterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NddaInterface_Interface_Subinterface) GetOrCreateIpv4(IpPrefix string) *NddaInterface_Interface_Subinterface_Ipv4 {

	key := IpPrefix

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NddaInterface_Interface_Subinterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NddaInterface_Interface_Subinterface) GetIpv4(IpPrefix string) *NddaInterface_Interface_Subinterface_Ipv4 {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NddaInterface_Interface_Subinterface. If there is no such element, the function
// is a no-op.
func (t *NddaInterface_Interface_Subinterface) DeleteIpv4(IpPrefix string) {
	key := IpPrefix

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NddaInterface_Interface_Subinterface_Ipv4 struct to the
// list Ipv4 of NddaInterface_Interface_Subinterface. If the key value(s) specified in
// the supplied NddaInterface_Interface_Subinterface_Ipv4 already exist in the list, an error is
// returned.
func (t *NddaInterface_Interface_Subinterface) AppendIpv4(v *NddaInterface_Interface_Subinterface_Ipv4) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[string]*NddaInterface_Interface_Subinterface_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NddaInterface_Interface_Subinterface struct. The keys of the list are populated from the input
// arguments.
func (t *NddaInterface_Interface_Subinterface) NewIpv6(IpPrefix string) (*NddaInterface_Interface_Subinterface_Ipv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[string]*NddaInterface_Interface_Subinterface_Ipv6)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NddaInterface_Interface_Subinterface_Ipv6{
		IpPrefix: &IpPrefix,
	}

	return t.Ipv6[key], nil
}

// GetOrCreateIpv6 retrieves the value with the specified keys from
// the receiver NddaInterface_Interface_Subinterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NddaInterface_Interface_Subinterface) GetOrCreateIpv6(IpPrefix string) *NddaInterface_Interface_Subinterface_Ipv6 {

	key := IpPrefix

	if v, ok := t.Ipv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6 got unexpected error: %v", err))
	}
	return v
}

// GetIpv6 retrieves the value with the specified key from
// the Ipv6 map field of NddaInterface_Interface_Subinterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NddaInterface_Interface_Subinterface) GetIpv6(IpPrefix string) *NddaInterface_Interface_Subinterface_Ipv6 {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Ipv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6 deletes the value with the specified keys from
// the receiver NddaInterface_Interface_Subinterface. If there is no such element, the function
// is a no-op.
func (t *NddaInterface_Interface_Subinterface) DeleteIpv6(IpPrefix string) {
	key := IpPrefix

	delete(t.Ipv6, key)
}

// AppendIpv6 appends the supplied NddaInterface_Interface_Subinterface_Ipv6 struct to the
// list Ipv6 of NddaInterface_Interface_Subinterface. If the key value(s) specified in
// the supplied NddaInterface_Interface_Subinterface_Ipv6 already exist in the list, an error is
// returned.
func (t *NddaInterface_Interface_Subinterface) AppendIpv6(v *NddaInterface_Interface_Subinterface_Ipv6) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[string]*NddaInterface_Interface_Subinterface_Ipv6)
	}

	if _, ok := t.Ipv6[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6 %v", key)
	}

	t.Ipv6[key] = v
	return nil
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *NddaInterface_Interface_Subinterface) GetOrCreateConfig() *NddaInterface_Interface_Subinterface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &NddaInterface_Interface_Subinterface_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from NddaInterface_Interface_Subinterface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddaInterface_Interface_Subinterface) GetConfig() *NddaInterface_Interface_Subinterface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface_Subinterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface_Subinterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6 {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NddaInterface_Interface_Subinterface struct, which is a YANG list entry.
func (t *NddaInterface_Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaInterface_Interface_Subinterface_Config represents the /ndda-interface/interface/subinterface/config YANG schema element.
type NddaInterface_Interface_Subinterface_Config struct {
	Index       *uint32                       `path:"index" module:"ndda-interface"`
	InnerVlanId *uint16                       `path:"inner-vlan-id" module:"ndda-interface"`
	Kind        E_NddaCommon_SubinterfaceKind `path:"kind" module:"ndda-interface"`
	OuterVlanId *uint16                       `path:"outer-vlan-id" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Config) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface_Subinterface_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface_Subinterface_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaInterface_Interface_Subinterface_Ipv4 represents the /ndda-interface/interface/subinterface/ipv4 YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv4 struct {
	Config   *NddaInterface_Interface_Subinterface_Ipv4_Config `path:"config" module:"ndda-interface"`
	IpPrefix *string                                           `path:"ip-prefix" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv4) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *NddaInterface_Interface_Subinterface_Ipv4) GetOrCreateConfig() *NddaInterface_Interface_Subinterface_Ipv4_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &NddaInterface_Interface_Subinterface_Ipv4_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from NddaInterface_Interface_Subinterface_Ipv4. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddaInterface_Interface_Subinterface_Ipv4) GetConfig() *NddaInterface_Interface_Subinterface_Ipv4_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface_Subinterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface_Subinterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NddaInterface_Interface_Subinterface_Ipv4 struct, which is a YANG list entry.
func (t *NddaInterface_Interface_Subinterface_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaInterface_Interface_Subinterface_Ipv4_Config represents the /ndda-interface/interface/subinterface/ipv4/config YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv4_Config struct {
	IpAddress    *string `path:"ip-address" module:"ndda-interface"`
	IpCidr       *string `path:"ip-cidr" module:"ndda-interface"`
	IpPrefix     *string `path:"ip-prefix" module:"ndda-interface"`
	PrefixLength *uint32 `path:"prefix-length" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv4_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv4_Config) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface_Subinterface_Ipv4_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface_Subinterface_Ipv4_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv4_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv4_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv4_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaInterface_Interface_Subinterface_Ipv6 represents the /ndda-interface/interface/subinterface/ipv6 YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv6 struct {
	Config   *NddaInterface_Interface_Subinterface_Ipv6_Config `path:"config" module:"ndda-interface"`
	IpPrefix *string                                           `path:"ip-prefix" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv6) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *NddaInterface_Interface_Subinterface_Ipv6) GetOrCreateConfig() *NddaInterface_Interface_Subinterface_Ipv6_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &NddaInterface_Interface_Subinterface_Ipv6_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from NddaInterface_Interface_Subinterface_Ipv6. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddaInterface_Interface_Subinterface_Ipv6) GetConfig() *NddaInterface_Interface_Subinterface_Ipv6_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface_Subinterface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface_Subinterface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NddaInterface_Interface_Subinterface_Ipv6 struct, which is a YANG list entry.
func (t *NddaInterface_Interface_Subinterface_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaInterface_Interface_Subinterface_Ipv6_Config represents the /ndda-interface/interface/subinterface/ipv6/config YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv6_Config struct {
	IpAddress    *string `path:"ip-address" module:"ndda-interface"`
	IpCidr       *string `path:"ip-cidr" module:"ndda-interface"`
	IpPrefix     *string `path:"ip-prefix" module:"ndda-interface"`
	PrefixLength *uint32 `path:"prefix-length" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv6_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv6_Config) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NddaInterface_Interface_Subinterface_Ipv6_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaInterface_Interface_Subinterface_Ipv6_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv6_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv6_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv6_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaNetworkInstance_NetworkInstance represents the /ndda-network-instance/network-instance YANG schema element.
type NddaNetworkInstance_NetworkInstance struct {
	Config *NddaNetworkInstance_NetworkInstance_Config `path:"config" module:"ndda-network-instance"`
	Name   *string                                     `path:"name" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *NddaNetworkInstance_NetworkInstance) GetOrCreateConfig() *NddaNetworkInstance_NetworkInstance_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &NddaNetworkInstance_NetworkInstance_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from NddaNetworkInstance_NetworkInstance. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddaNetworkInstance_NetworkInstance) GetConfig() *NddaNetworkInstance_NetworkInstance_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaNetworkInstance_NetworkInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaNetworkInstance_NetworkInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NddaNetworkInstance_NetworkInstance struct, which is a YANG list entry.
func (t *NddaNetworkInstance_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaNetworkInstance_NetworkInstance_Config represents the /ndda-network-instance/network-instance/config YANG schema element.
type NddaNetworkInstance_NetworkInstance_Config struct {
	Index     *uint32                                                          `path:"index" module:"ndda-network-instance"`
	Interface map[string]*NddaNetworkInstance_NetworkInstance_Config_Interface `path:"interface" module:"ndda-network-instance"`
	Kind      E_NddaCommon_NiKind                                              `path:"kind" module:"ndda-network-instance"`
	Name      *string                                                          `path:"name" module:"ndda-network-instance"`
	RouterId  *string                                                          `path:"router-id" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance_Config) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NddaNetworkInstance_NetworkInstance_Config struct. The keys of the list are populated from the input
// arguments.
func (t *NddaNetworkInstance_NetworkInstance_Config) NewInterface(Name string) (*NddaNetworkInstance_NetworkInstance_Config_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NddaNetworkInstance_NetworkInstance_Config_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NddaNetworkInstance_NetworkInstance_Config_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NddaNetworkInstance_NetworkInstance_Config. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NddaNetworkInstance_NetworkInstance_Config) GetOrCreateInterface(Name string) *NddaNetworkInstance_NetworkInstance_Config_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NddaNetworkInstance_NetworkInstance_Config. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NddaNetworkInstance_NetworkInstance_Config) GetInterface(Name string) *NddaNetworkInstance_NetworkInstance_Config_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NddaNetworkInstance_NetworkInstance_Config. If there is no such element, the function
// is a no-op.
func (t *NddaNetworkInstance_NetworkInstance_Config) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NddaNetworkInstance_NetworkInstance_Config_Interface struct to the
// list Interface of NddaNetworkInstance_NetworkInstance_Config. If the key value(s) specified in
// the supplied NddaNetworkInstance_NetworkInstance_Config_Interface already exist in the list, an error is
// returned.
func (t *NddaNetworkInstance_NetworkInstance_Config) AppendInterface(v *NddaNetworkInstance_NetworkInstance_Config_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NddaNetworkInstance_NetworkInstance_Config_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaNetworkInstance_NetworkInstance_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaNetworkInstance_NetworkInstance_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaNetworkInstance_NetworkInstance_Config_Interface represents the /ndda-network-instance/network-instance/config/interface YANG schema element.
type NddaNetworkInstance_NetworkInstance_Config_Interface struct {
	Name *string `path:"name" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance_Config_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance_Config_Interface) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NddaNetworkInstance_NetworkInstance_Config_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaNetworkInstance_NetworkInstance_Config_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NddaNetworkInstance_NetworkInstance_Config_Interface struct, which is a YANG list entry.
func (t *NddaNetworkInstance_NetworkInstance_Config_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance_Config_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance_Config_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance_Config_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NddaSystem_System represents the /ndda-system/system YANG schema element.
type NddaSystem_System struct {
	Platform *NddaSystem_System_Platform `path:"platform" module:"ndda-system"`
}

// IsYANGGoStruct ensures that NddaSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System) IsYANGGoStruct() {}

// GetOrCreatePlatform retrieves the value of the Platform field
// or returns the existing field if it already exists.
func (t *NddaSystem_System) GetOrCreatePlatform() *NddaSystem_System_Platform {
	if t.Platform != nil {
		return t.Platform
	}
	t.Platform = &NddaSystem_System_Platform{}
	return t.Platform
}

// GetPlatform returns the value of the Platform struct pointer
// from NddaSystem_System. If the receiver or the field Platform is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddaSystem_System) GetPlatform() *NddaSystem_System_Platform {
	if t != nil && t.Platform != nil {
		return t.Platform
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaSystem_System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaSystem_System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Platform.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NddaSystem_System_Platform represents the /ndda-system/system/platform YANG schema element.
type NddaSystem_System_Platform struct {
	Config *NddaSystem_System_Platform_Config `path:"config" module:"ndda-system"`
}

// IsYANGGoStruct ensures that NddaSystem_System_Platform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System_Platform) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *NddaSystem_System_Platform) GetOrCreateConfig() *NddaSystem_System_Platform_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &NddaSystem_System_Platform_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from NddaSystem_System_Platform. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NddaSystem_System_Platform) GetConfig() *NddaSystem_System_Platform_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NddaSystem_System_Platform
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaSystem_System_Platform) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System_Platform) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System_Platform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System_Platform) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NddaSystem_System_Platform_Config represents the /ndda-system/system/platform/config YANG schema element.
type NddaSystem_System_Platform_Config struct {
	Index   *uint32                 `path:"index" module:"ndda-system"`
	Kind    E_NddaCommon_DeviceKind `path:"kind" module:"ndda-system"`
	Name    *string                 `path:"name" module:"ndda-system"`
	Version *string                 `path:"version" module:"ndda-system"`
}

// IsYANGGoStruct ensures that NddaSystem_System_Platform_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System_Platform_Config) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NddaSystem_System_Platform_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NddaSystem_System_Platform_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System_Platform_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System_Platform_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System_Platform_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// E_NddaCommon_DeviceKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_DeviceKind. An additional value named
// NddaCommon_DeviceKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_DeviceKind int64

// IsYANGGoEnum ensures that NddaCommon_DeviceKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_DeviceKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_DeviceKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_DeviceKind.
func (E_NddaCommon_DeviceKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddaCommon_DeviceKind.
func (e E_NddaCommon_DeviceKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_DeviceKind")
}

const (
	// NddaCommon_DeviceKind_UNSET corresponds to the value UNSET of NddaCommon_DeviceKind
	NddaCommon_DeviceKind_UNSET E_NddaCommon_DeviceKind = 0
	// NddaCommon_DeviceKind_SRL corresponds to the value SRL of NddaCommon_DeviceKind
	NddaCommon_DeviceKind_SRL E_NddaCommon_DeviceKind = 1
	// NddaCommon_DeviceKind_SROS corresponds to the value SROS of NddaCommon_DeviceKind
	NddaCommon_DeviceKind_SROS E_NddaCommon_DeviceKind = 2
)

// E_NddaCommon_InterfaceKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_InterfaceKind. An additional value named
// NddaCommon_InterfaceKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_InterfaceKind int64

// IsYANGGoEnum ensures that NddaCommon_InterfaceKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_InterfaceKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_InterfaceKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_InterfaceKind.
func (E_NddaCommon_InterfaceKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddaCommon_InterfaceKind.
func (e E_NddaCommon_InterfaceKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_InterfaceKind")
}

const (
	// NddaCommon_InterfaceKind_UNSET corresponds to the value UNSET of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_UNSET E_NddaCommon_InterfaceKind = 0
	// NddaCommon_InterfaceKind_INTERFACE corresponds to the value INTERFACE of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_INTERFACE E_NddaCommon_InterfaceKind = 1
	// NddaCommon_InterfaceKind_LOOPBACK corresponds to the value LOOPBACK of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_LOOPBACK E_NddaCommon_InterfaceKind = 2
	// NddaCommon_InterfaceKind_IRB corresponds to the value IRB of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_IRB E_NddaCommon_InterfaceKind = 3
	// NddaCommon_InterfaceKind_VXLAN corresponds to the value VXLAN of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_VXLAN E_NddaCommon_InterfaceKind = 4
	// NddaCommon_InterfaceKind_MPLS corresponds to the value MPLS of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_MPLS E_NddaCommon_InterfaceKind = 5
)

// E_NddaCommon_NiKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_NiKind. An additional value named
// NddaCommon_NiKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_NiKind int64

// IsYANGGoEnum ensures that NddaCommon_NiKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_NiKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_NiKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_NiKind.
func (E_NddaCommon_NiKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddaCommon_NiKind.
func (e E_NddaCommon_NiKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_NiKind")
}

const (
	// NddaCommon_NiKind_UNSET corresponds to the value UNSET of NddaCommon_NiKind
	NddaCommon_NiKind_UNSET E_NddaCommon_NiKind = 0
	// NddaCommon_NiKind_ROUTED corresponds to the value ROUTED of NddaCommon_NiKind
	NddaCommon_NiKind_ROUTED E_NddaCommon_NiKind = 1
	// NddaCommon_NiKind_BRIDGED corresponds to the value BRIDGED of NddaCommon_NiKind
	NddaCommon_NiKind_BRIDGED E_NddaCommon_NiKind = 2
)

// E_NddaCommon_OperState is a derived int64 type which is used to represent
// the enumerated node NddaCommon_OperState. An additional value named
// NddaCommon_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_OperState int64

// IsYANGGoEnum ensures that NddaCommon_OperState implements the yang.GoEnum
// interface. This ensures that NddaCommon_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_OperState.
func (E_NddaCommon_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddaCommon_OperState.
func (e E_NddaCommon_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_OperState")
}

const (
	// NddaCommon_OperState_UNSET corresponds to the value UNSET of NddaCommon_OperState
	NddaCommon_OperState_UNSET E_NddaCommon_OperState = 0
	// NddaCommon_OperState_UP corresponds to the value UP of NddaCommon_OperState
	NddaCommon_OperState_UP E_NddaCommon_OperState = 1
	// NddaCommon_OperState_DOWN corresponds to the value DOWN of NddaCommon_OperState
	NddaCommon_OperState_DOWN E_NddaCommon_OperState = 2
)

// E_NddaCommon_SubinterfaceKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_SubinterfaceKind. An additional value named
// NddaCommon_SubinterfaceKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_SubinterfaceKind int64

// IsYANGGoEnum ensures that NddaCommon_SubinterfaceKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_SubinterfaceKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_SubinterfaceKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_SubinterfaceKind.
func (E_NddaCommon_SubinterfaceKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddaCommon_SubinterfaceKind.
func (e E_NddaCommon_SubinterfaceKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_SubinterfaceKind")
}

const (
	// NddaCommon_SubinterfaceKind_UNSET corresponds to the value UNSET of NddaCommon_SubinterfaceKind
	NddaCommon_SubinterfaceKind_UNSET E_NddaCommon_SubinterfaceKind = 0
	// NddaCommon_SubinterfaceKind_ROUTED corresponds to the value ROUTED of NddaCommon_SubinterfaceKind
	NddaCommon_SubinterfaceKind_ROUTED E_NddaCommon_SubinterfaceKind = 1
	// NddaCommon_SubinterfaceKind_BRIDGED corresponds to the value BRIDGED of NddaCommon_SubinterfaceKind
	NddaCommon_SubinterfaceKind_BRIDGED E_NddaCommon_SubinterfaceKind = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_NddaCommon_DeviceKind": {
		1: {Name: "SRL"},
		2: {Name: "SROS"},
	},
	"E_NddaCommon_InterfaceKind": {
		1: {Name: "INTERFACE"},
		2: {Name: "LOOPBACK"},
		3: {Name: "IRB"},
		4: {Name: "VXLAN"},
		5: {Name: "MPLS"},
	},
	"E_NddaCommon_NiKind": {
		1: {Name: "ROUTED"},
		2: {Name: "BRIDGED"},
	},
	"E_NddaCommon_OperState": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
	},
	"E_NddaCommon_SubinterfaceKind": {
		1: {Name: "ROUTED"},
		2: {Name: "BRIDGED"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6d, 0x73, 0xda, 0xc6,
		0x16, 0xfe, 0xee, 0x5f, 0xa1, 0xaa, 0xed, 0x14, 0x5a, 0x2b, 0x08, 0x02, 0x38, 0xb8, 0xd3, 0x49,
		0x7d, 0x6f, 0x9a, 0x69, 0xa6, 0x69, 0x6e, 0xa6, 0xb9, 0x73, 0x3f, 0x94, 0xd0, 0x54, 0x06, 0xd9,
		0xd1, 0x18, 0x0b, 0x46, 0x2f, 0xce, 0x9b, 0xdd, 0xdf, 0x7e, 0x07, 0x24, 0x84, 0x40, 0x42, 0x3a,
		0x67, 0x25, 0x81, 0x24, 0x9e, 0x7e, 0xa8, 0x09, 0xec, 0xea, 0x65, 0xf7, 0xd9, 0xf3, 0x9c, 0xdd,
		0xf3, 0xec, 0xd9, 0x2f, 0x27, 0x92, 0x24, 0x49, 0xf2, 0x2b, 0xed, 0x56, 0x97, 0xcf, 0x25, 0x79,
		0xa2, 0xdf, 0x19, 0x63, 0x5d, 0x3e, 0xf5, 0xbe, 0xfd, 0xcd, 0x30, 0x27, 0xf2, 0xb9, 0xd4, 0xf6,
		0xff, 0xf9, 0xef, 0x99, 0x79, 0x65, 0x5c, 0xcb, 0xe7, 0x92, 0xea, 0x7f, 0xf1, 0xcc, 0xb0, 0xe4,
		0x73, 0xc9, 0xbb, 0xc4, 0xf2, 0x0b, 0xc3, 0x74, 0x74, 0xeb, 0x4a, 0x1b, 0xeb, 0x1b, 0x5f, 0x6f,
		0xdc, 0x61, 0x5d, 0xe4, 0x74, 0xb3, 0xc0, 0xe6, 0xcd, 0x82, 0xaf, 0xb7, 0x6f, 0x1a, 0xfc, 0xf0,
		0xda, 0xd2, 0xaf, 0x8c, 0x8f, 0x91, 0x1b, 0x6d, 0xdc, 0xcc, 0x9c, 0x4c, 0x34, 0xc5, 0xb8, 0xda,
		0xba, 0xd5, 0xb2, 0xc8, 0x9b, 0x99, 0x6b, 0xc5, 0x3c, 0xe7, 0xfa, 0x71, 0xf4, 0x4f, 0x1f, 0x66,
		0xd6, 0xe2, 0x89, 0xe4, 0xb9, 0x77, 0xa7, 0xd3, 0xf8, 0x82, 0xbf, 0x6a, 0xf6, 0x85, 0x75, 0xed,
		0xde, 0xea, 0xa6, 0x23, 0x9f, 0x4b, 0x8e, 0xe5, 0xea, 0x3b, 0x0a, 0x86, 0x4a, 0x05, 0x0f, 0x16,
		0x29, 0xf9, 0xb0, 0xf1, 0xcd, 0xc3, 0xd6, 0x3b, 0x6f, 0x37, 0x78, 0xf0, 0xc3, 0x78, 0xd5, 0x4a,
		0x3b, 0xde, 0x66, 0xd5, 0x20, 0x7e, 0xb9, 0x1d, 0x4f, 0x18, 0xdf, 0x05, 0xa9, 0x5d, 0x41, 0xe9,
		0x12, 0x46, 0xd7, 0x50, 0xbb, 0x88, 0xdd, 0x55, 0xec, 0x2e, 0xe3, 0x75, 0x5d, 0x7c, 0x17, 0xee,
		0xe8, 0xca, 0xd4, 0x2e, 0x0d, 0x0a, 0xdc, 0x78, 0x9d, 0x92, 0xd2, 0x06, 0xab, 0x66, 0x5d, 0x96,
		0x4e, 0x79, 0x1b, 0xbf, 0x9b, 0xd5, 0x94, 0x62, 0x69, 0xdd, 0xcd, 0xe9, 0x76, 0x81, 0xee, 0xe7,
		0xc2, 0x40, 0x18, 0x0e, 0xc2, 0xb0, 0x10, 0x83, 0x47, 0x32, 0x4c, 0x52, 0xe0, 0x12, 0xdc, 0xf2,
		0xbf, 0x9f, 0xe6, 0x3a, 0xaf, 0xc5, 0x03, 0xc3, 0xab, 0x10, 0x30, 0xb2, 0x61, 0x0e, 0xba, 0x84,
		0xb2, 0xbf, 0x98, 0xee, 0xed, 0xe2, 0x79, 0x52, 0xde, 0xea, 0x44, 0xe0, 0x7d, 0xe5, 0xa9, 0x36,
		0x9e, 0xd3, 0x47, 0xc0, 0xb2, 0x34, 0x46, 0x00, 0x46, 0x40, 0xa4, 0xc5, 0x2f, 0x67, 0xb3, 0xa9,
		0xae, 0x99, 0x1c, 0xe8, 0xb7, 0x0b, 0x82, 0xb3, 0x72, 0xa5, 0x4d, 0xa7, 0x97, 0xda, 0xf8, 0x86,
		0x87, 0xeb, 0x75, 0x35, 0x00, 0x1c, 0x00, 0x2f, 0x2f, 0xc0, 0xaf, 0x39, 0xb0, 0xbe, 0x06, 0x98,
		0x01, 0xe6, 0x32, 0x83, 0x59, 0xb9, 0xd5, 0x6f, 0x2f, 0x75, 0x8b, 0x85, 0xe9, 0x55, 0x1d, 0x40,
		0x1b, 0xd0, 0x2e, 0x33, 0xb4, 0x4d, 0xef, 0x91, 0x18, 0xc0, 0x5e, 0xd6, 0x00, 0xac, 0x01, 0xeb,
		0x68, 0x8b, 0xa7, 0x23, 0x63, 0x03, 0xd3, 0x4f, 0x08, 0x65, 0x5f, 0xea, 0xe6, 0xb5, 0xf3, 0x5e,
		0x3e, 0x97, 0x86, 0xa4, 0x86, 0xa2, 0x75, 0xe0, 0xf2, 0xca, 0xbf, 0x1b, 0x26, 0xb9, 0xc7, 0x83,
		0x4a, 0xff, 0xd3, 0xa6, 0xae, 0xbe, 0x7b, 0x89, 0x6c, 0x67, 0xbd, 0xe7, 0x96, 0x36, 0x76, 0x8c,
		0x99, 0xf9, 0xcc, 0xb8, 0x36, 0x1c, 0x3b, 0x1d, 0xf1, 0xd1, 0x36, 0xd6, 0xaf, 0x35, 0xc7, 0xb8,
		0x5b, 0xdc, 0xfb, 0x4a, 0x9b, 0xda, 0x3a, 0xb9, 0xf6, 0xc3, 0x29, 0xa3, 0x49, 0xb4, 0x8f, 0xe2,
		0x4d, 0xd2, 0xe9, 0xf5, 0xaa, 0xd3, 0x28, 0x27, 0xf9, 0x94, 0x1a, 0x11, 0x10, 0xfc, 0x5a, 0x73,
		0x1c, 0xdd, 0x32, 0xc9, 0x10, 0x96, 0x87, 0x17, 0xca, 0x9f, 0x9a, 0xf2, 0x59, 0x55, 0x06, 0xd2,
		0x57, 0x3f, 0x7f, 0xfd, 0xcd, 0xb7, 0x7f, 0xbd, 0x75, 0x55, 0xb5, 0xd3, 0x6f, 0x34, 0xef, 0x7f,
		0xf8, 0xe9, 0xef, 0x7f, 0x1e, 0x9d, 0x7e, 0xd7, 0x7a, 0x77, 0xfe, 0xe3, 0x53, 0x65, 0xf4, 0x7d,
		0xba, 0x05, 0x18, 0x15, 0xc0, 0x1a, 0x3c, 0xc6, 0x00, 0x5b, 0x80, 0x2d, 0xc0, 0x16, 0x60, 0x0b,
		0xb0, 0x45, 0x8d, 0xd9, 0x82, 0x15, 0xf0, 0xba, 0x30, 0xcd, 0x99, 0xa3, 0x2d, 0x7a, 0x32, 0x39,
		0xee, 0x65, 0x8f, 0xdf, 0xeb, 0xb7, 0xda, 0x5c, 0x5b, 0x8e, 0x67, 0xb9, 0xe5, 0xd9, 0xb1, 0x55,
		0x0c, 0xa3, 0xb5, 0xfe, 0x94, 0x18, 0xd2, 0xf4, 0xae, 0xe4, 0x58, 0xee, 0xd8, 0xf1, 0x79, 0x4b,
		0x7e, 0x35, 0x99, 0x68, 0x2f, 0x56, 0xb5, 0xdf, 0xad, 0x3f, 0xf9, 0xf4, 0x72, 0x42, 0x7b, 0xc3,
		0x98, 0xb7, 0x4b, 0x66, 0x46, 0x8a, 0xdd, 0x4b, 0x61, 0x42, 0x04, 0x60, 0x8b, 0x08, 0xc0, 0xa6,
		0x32, 0xd7, 0x7a, 0xf6, 0xab, 0x6b, 0x57, 0x96, 0x9e, 0xd8, 0x62, 0x2b, 0xb2, 0x3a, 0x4b, 0x28,
		0xf3, 0xda, 0x87, 0xf4, 0xa3, 0x47, 0x3e, 0x76, 0x5b, 0x4b, 0x48, 0x64, 0x00, 0x9e, 0xed, 0x68,
		0x0e, 0x01, 0x79, 0x5e, 0xb1, 0x8c, 0xb1, 0xff, 0x0e, 0xa0, 0x87, 0xd8, 0x3f, 0x7c, 0xed, 0x6a,
		0xf9, 0xda, 0x88, 0xfd, 0x63, 0x04, 0x60, 0xc9, 0x1d, 0xb1, 0x7f, 0x00, 0x1c, 0x00, 0x47, 0xec,
		0x1f, 0x60, 0x06, 0x98, 0xa9, 0x60, 0x46, 0xec, 0x1f, 0xd0, 0xae, 0x2b, 0xb4, 0x11, 0xfb, 0x07,
		0xac, 0xf3, 0x82, 0x35, 0xa2, 0x39, 0x65, 0x0c, 0x5c, 0x20, 0x9a, 0x23, 0x12, 0xa7, 0x91, 0x10,
		0xfb, 0xdf, 0xf1, 0x78, 0x88, 0xfd, 0x83, 0x2d, 0xc0, 0x16, 0x60, 0x0b, 0xb0, 0x05, 0xd8, 0x22,
		0x9d, 0x2d, 0x2c, 0x5d, 0xb3, 0x67, 0x26, 0x9d, 0x2f, 0xfc, 0xf2, 0x60, 0x0c, 0x30, 0x46, 0xa4,
		0xc5, 0x6d, 0xc7, 0x32, 0xcc, 0x6b, 0x16, 0x67, 0x14, 0x80, 0x68, 0xdb, 0xd1, 0x1c, 0xc3, 0x76,
		0x8c, 0xb1, 0x4d, 0x47, 0x75, 0xa8, 0x0e, 0x0d, 0xd9, 0x6d, 0x20, 0xbb, 0xba, 0xc8, 0x4e, 0x0b,
		0xe9, 0x07, 0x05, 0x0d, 0x53, 0x99, 0x8d, 0x1d, 0xdd, 0xb1, 0xe9, 0x0d, 0xb8, 0x8e, 0xe6, 0xae,
		0xaa, 0x12, 0xdb, 0x81, 0x66, 0x32, 0xd9, 0x00, 0x13, 0x01, 0x5a, 0x06, 0xc0, 0x89, 0x02, 0x2f,
		0x33, 0x00, 0x33, 0x03, 0x31, 0x1b, 0x20, 0x99, 0xae, 0x08, 0xb1, 0xcf, 0xc8, 0x26, 0x38, 0xd2,
		0x63, 0x9f, 0x75, 0x6b, 0xa6, 0x5c, 0x6a, 0xb6, 0x3e, 0x51, 0xc6, 0x33, 0xd7, 0x74, 0x74, 0xab,
		0xdf, 0xe5, 0x74, 0x9f, 0x8f, 0xc6, 0x27, 0x8c, 0x2a, 0xcf, 0xf4, 0x2b, 0xcd, 0x9d, 0x2e, 0x9b,
		0x4d, 0xe5, 0xdc, 0xea, 0x57, 0xcd, 0x5e, 0x57, 0xe5, 0xf5, 0x97, 0xfc, 0x87, 0x66, 0x5e, 0xeb,
		0x64, 0x5f, 0x8c, 0x3f, 0xad, 0xc8, 0x34, 0xbd, 0x88, 0xf8, 0xd4, 0x4c, 0x87, 0x38, 0x37, 0xcf,
		0x3a, 0xbb, 0x87, 0x2d, 0x30, 0xfd, 0xc8, 0x34, 0x0d, 0x89, 0xce, 0xd0, 0x9e, 0x74, 0xbb, 0xfd,
		0xb3, 0x6e, 0x57, 0x3d, 0x7b, 0x7c, 0xa6, 0x0e, 0x7a, 0xbd, 0x76, 0xbf, 0xdd, 0xab, 0x7e, 0x6b,
		0x9e, 0x14, 0x53, 0x7a, 0x94, 0xd3, 0x7c, 0x88, 0xd0, 0xdb, 0x0b, 0x9e, 0x73, 0x4d, 0x63, 0xac,
		0xd9, 0x8e, 0x32, 0xd7, 0xc6, 0x37, 0xa2, 0x5c, 0xb9, 0x7d, 0x0d, 0x90, 0x26, 0x48, 0x13, 0xa4,
		0x09, 0xd2, 0x04, 0x69, 0x82, 0x34, 0xeb, 0x47, 0x9a, 0x33, 0xd7, 0x11, 0x9e, 0x58, 0x86, 0xea,
		0x82, 0x24, 0x41, 0x92, 0x20, 0x49, 0x90, 0x24, 0x48, 0x12, 0x24, 0x59, 0x4f, 0x92, 0xcc, 0x3c,
		0xb5, 0x8c, 0xbb, 0x08, 0x68, 0x13, 0xb4, 0x09, 0xda, 0x04, 0x6d, 0x82, 0x36, 0x41, 0x9b, 0x15,
		0xa3, 0xcd, 0x4c, 0x61, 0x4f, 0x62, 0x52, 0x87, 0xa0, 0x3c, 0x35, 0xb9, 0xc3, 0x72, 0xcb, 0x7a,
		0x2b, 0x14, 0x42, 0x2f, 0x28, 0xa8, 0xef, 0x32, 0x03, 0xfa, 0xae, 0x0d, 0x99, 0x0a, 0x64, 0x2a,
		0x31, 0x3e, 0xe1, 0x5c, 0xb7, 0x94, 0xa4, 0x3c, 0x0b, 0x71, 0x18, 0xd9, 0xcf, 0x26, 0xeb, 0x83,
		0x26, 0x69, 0xf1, 0x9a, 0x24, 0x4b, 0x8a, 0x0b, 0xf7, 0x72, 0xf7, 0xe1, 0x22, 0xd1, 0x21, 0x1a,
		0x2e, 0x5d, 0x9e, 0xc3, 0x2e, 0x14, 0xdb, 0xa8, 0x6c, 0xce, 0x8b, 0xc5, 0xb3, 0xef, 0x2b, 0xed,
		0x45, 0xca, 0x69, 0x26, 0x91, 0xe6, 0x4d, 0x4d, 0x01, 0x24, 0x95, 0x4c, 0x5e, 0x95, 0x0c, 0x84,
		0x6a, 0x1b, 0xe5, 0x44, 0xa0, 0xe4, 0x63, 0x97, 0x19, 0x22, 0xab, 0x89, 0xfe, 0x51, 0x24, 0x68,
		0xbc, 0xa8, 0x56, 0x9f, 0xb9, 0x3c, 0x0d, 0x6e, 0xf5, 0x9c, 0xce, 0x93, 0xe0, 0x58, 0xb6, 0x19,
		0xbd, 0x6b, 0x98, 0xce, 0xe3, 0x8e, 0xc0, 0x1c, 0xfe, 0x0c, 0xf3, 0x69, 0xcc, 0xa7, 0xb7, 0x9b,
		0x6e, 0x30, 0x18, 0x0c, 0x30, 0x7f, 0x2e, 0xc1, 0xb2, 0xb3, 0x61, 0x9a, 0xba, 0xa5, 0xdc, 0x4d,
		0x35, 0x53, 0x31, 0x26, 0x22, 0xb4, 0x14, 0xae, 0x0e, 0x7a, 0x02, 0x3d, 0x1d, 0x88, 0x9e, 0x78,
		0x10, 0x0c, 0xc3, 0xb0, 0x5f, 0x5b, 0x7e, 0x6a, 0x83, 0x9f, 0x44, 0x9b, 0xae, 0xab, 0x0e, 0xba,
		0xe0, 0xa7, 0x12, 0xf0, 0x13, 0x29, 0xdd, 0x64, 0xc4, 0x1a, 0x10, 0x53, 0x0a, 0x82, 0x8d, 0xc0,
		0x46, 0x85, 0xb0, 0x51, 0x78, 0xb1, 0x4f, 0x61, 0x80, 0x91, 0xbb, 0x04, 0xcb, 0x5c, 0x8a, 0xcd,
		0x77, 0x68, 0xce, 0x5c, 0x27, 0x8b, 0xeb, 0xb8, 0x59, 0x1d, 0x83, 0x15, 0x83, 0x15, 0xae, 0x23,
		0x5c, 0x47, 0xb8, 0x8e, 0x70, 0x1d, 0xab, 0x2b, 0x0d, 0x08, 0xd1, 0x7e, 0x8b, 0x14, 0x01, 0x92,
		0xe8, 0x87, 0x41, 0xbc, 0x09, 0x5d, 0x3c, 0xf1, 0x64, 0x88, 0xf4, 0x36, 0x4a, 0x92, 0x1e, 0xd0,
		0xe2, 0x13, 0xac, 0xb8, 0x44, 0x99, 0x84, 0x07, 0x08, 0x73, 0xed, 0x59, 0x7e, 0x90, 0x7e, 0x42,
		0x45, 0xc4, 0xf1, 0x3d, 0xa3, 0x25, 0xa6, 0xd9, 0x3a, 0xb1, 0xc2, 0x43, 0x62, 0x11, 0x23, 0x62,
		0x7e, 0xd7, 0x65, 0x0c, 0x88, 0x45, 0xe9, 0x4a, 0x85, 0x7d, 0x15, 0xad, 0xd6, 0x43, 0x62, 0xf1,
		0x7a, 0x65, 0x09, 0xfe, 0x12, 0x55, 0x04, 0x91, 0xce, 0x22, 0x73, 0x09, 0x03, 0x5e, 0x87, 0x9e,
		0x24, 0xd1, 0x60, 0x57, 0xdb, 0x79, 0x12, 0x09, 0x96, 0xc5, 0x4c, 0x95, 0xa8, 0x70, 0x0d, 0x59,
		0x40, 0x45, 0x9b, 0x4c, 0x2c, 0xdd, 0xb6, 0xf9, 0xed, 0xbf, 0xb6, 0x8b, 0xc1, 0x35, 0x98, 0xed,
		0xc7, 0x9b, 0xf3, 0x0b, 0xc3, 0x3a, 0x0b, 0xbc, 0x73, 0x83, 0x79, 0x56, 0xb8, 0xe7, 0x06, 0xfb,
		0xdc, 0xe0, 0x9f, 0xe7, 0x30, 0x10, 0x9c, 0x9d, 0x30, 0xfb, 0x9f, 0xbd, 0x92, 0x10, 0xeb, 0x03,
		0x08, 0xa2, 0x5d, 0x62, 0xe6, 0x98, 0x8c, 0x73, 0x8c, 0x58, 0x19, 0xfb, 0x22, 0x17, 0x68, 0x34,
		0x86, 0xaa, 0x32, 0x18, 0xdd, 0x0f, 0xdb, 0xca, 0x60, 0xe4, 0x7d, 0x6c, 0x2f, 0xff, 0x78, 0x9f,
		0x3b, 0x43, 0x55, 0xe9, 0xae, 0x3e, 0xf7, 0x86, 0xaa, 0xd2, 0x1b, 0x35, 0xdf, 0xbe, 0x7d, 0xd4,
		0xfc, 0xf2, 0xf8, 0x81, 0x5f, 0x91, 0xdf, 0xf5, 0xa3, 0x82, 0x26, 0xa6, 0x9c, 0x4c, 0x93, 0xc6,
		0x5c, 0x19, 0x1b, 0x13, 0x2b, 0x93, 0x2d, 0x5c, 0x5e, 0x00, 0x86, 0x10, 0x86, 0xb0, 0xfe, 0x86,
		0xd0, 0x6b, 0x76, 0xe5, 0x83, 0xe1, 0xbc, 0x57, 0xde, 0xcf, 0x6c, 0x47, 0xb9, 0x34, 0x1c, 0x98,
		0xc5, 0xa4, 0x8a, 0x2d, 0xff, 0x66, 0xcd, 0xfb, 0xc6, 0xb0, 0xad, 0x74, 0x46, 0xab, 0x7f, 0x3c,
		0x1e, 0xaa, 0x4a, 0x67, 0xd4, 0xac, 0xae, 0xd9, 0x9c, 0x8b, 0x59, 0x94, 0xb0, 0xe1, 0x14, 0x73,
		0xe2, 0x61, 0x3a, 0x61, 0x3a, 0x61, 0x3a, 0x61, 0x3a, 0x2b, 0x6a, 0x3a, 0x7d, 0x1c, 0x4c, 0x57,
		0xf9, 0xe4, 0x05, 0xcd, 0xe7, 0xe6, 0x65, 0x60, 0x42, 0x61, 0x42, 0x6b, 0x6d, 0x42, 0xd9, 0x5b,
		0x16, 0xb6, 0xb1, 0x7e, 0x26, 0x50, 0x55, 0x2c, 0xce, 0xbf, 0xfa, 0x4f, 0x0c, 0x66, 0x52, 0xd6,
		0xb8, 0x7f, 0x70, 0x91, 0x8c, 0x5b, 0x1b, 0x82, 0xeb, 0xe4, 0x15, 0xc9, 0x5e, 0xf7, 0x69, 0xd6,
		0x88, 0xb6, 0x20, 0x0c, 0x37, 0x9b, 0x38, 0x83, 0x3e, 0x20, 0xd2, 0xc4, 0xdd, 0xce, 0xa0, 0x3b,
		0xe8, 0x9f, 0x75, 0x06, 0xbd, 0xfa, 0xb6, 0xf5, 0xc9, 0x7e, 0x6a, 0x15, 0x46, 0xd1, 0xb9, 0x2e,
		0xbb, 0x33, 0x55, 0x07, 0x41, 0x3d, 0x21, 0xf5, 0xc1, 0xc2, 0x7d, 0x6c, 0xb1, 0xc2, 0x46, 0x92,
		0xa0, 0x14, 0xe1, 0xc5, 0xfc, 0xae, 0x4b, 0xd2, 0x23, 0xd0, 0x5b, 0x95, 0xb4, 0x71, 0x85, 0x3d,
		0x9b, 0x14, 0x9e, 0x45, 0x56, 0x44, 0x75, 0x88, 0x80, 0x5a, 0xf5, 0xb4, 0x87, 0x74, 0x75, 0x44,
		0x64, 0x2a, 0xc7, 0xd9, 0x57, 0x19, 0xa3, 0x96, 0x08, 0xc6, 0xc0, 0x1e, 0xc7, 0xac, 0x97, 0x72,
		0x81, 0x3d, 0x5e, 0xa9, 0xc9, 0x2b, 0xa4, 0x2c, 0xc1, 0xef, 0x0e, 0xc6, 0xea, 0x51, 0x8c, 0x55,
		0x04, 0xbf, 0x31, 0xeb, 0xc6, 0xac, 0xbb, 0xe8, 0x85, 0x4b, 0x04, 0xbf, 0x11, 0xfc, 0xde, 0x6d,
		0x0b, 0x11, 0xfc, 0x86, 0x21, 0x44, 0x04, 0x07, 0x66, 0x11, 0xc1, 0xef, 0x22, 0x97, 0x2d, 0x60,
		0x3a, 0x61, 0x3a, 0x61, 0x3a, 0x61, 0x3a, 0x11, 0xfc, 0x46, 0xf0, 0x1b, 0x26, 0x54, 0x42, 0xf0,
		0x9b, 0x87, 0x75, 0x04, 0xbf, 0x45, 0xaf, 0x83, 0xe0, 0x77, 0x6a, 0x13, 0x23, 0xf8, 0x9d, 0x5b,
		0xad, 0x32, 0x50, 0xb4, 0xa5, 0x6b, 0xf6, 0xcc, 0x14, 0xe7, 0x66, 0xbf, 0x3e, 0x48, 0x19, 0xa4,
		0x5c, 0x6b, 0x52, 0xb6, 0x1d, 0xcb, 0x30, 0xaf, 0x33, 0xcd, 0x61, 0x4a, 0x30, 0xda, 0x43, 0x67,
		0x5f, 0x08, 0x8f, 0xf8, 0xd0, 0x35, 0xc4, 0x46, 0x7d, 0x1b, 0xa3, 0x1e, 0xa3, 0x7e, 0x1f, 0xa3,
		0x5e, 0x50, 0xb6, 0xb5, 0x1e, 0x2d, 0xc2, 0xf2, 0x2d, 0xde, 0x49, 0x33, 0xfb, 0x1b, 0xfb, 0x6e,
		0xc6, 0x71, 0xef, 0x22, 0x0a, 0x8e, 0x31, 0x5f, 0x73, 0xa6, 0x67, 0x9d, 0xba, 0xb3, 0x93, 0xe3,
		0x04, 0x12, 0x89, 0x31, 0x53, 0x41, 0x0a, 0x58, 0x8b, 0x8a, 0x8b, 0x62, 0x13, 0xce, 0xfd, 0xe1,
		0xbf, 0x6a, 0xb6, 0xbc, 0x31, 0xbf, 0xe9, 0x9f, 0x38, 0x81, 0x1d, 0xf9, 0xa5, 0x61, 0x3b, 0x17,
		0x8e, 0x43, 0x4c, 0x36, 0xf3, 0xbb, 0x61, 0xfe, 0x32, 0xd5, 0x17, 0xe3, 0x8d, 0x38, 0x2f, 0x5e,
		0x4c, 0xf1, 0x43, 0x35, 0xfa, 0x94, 0x33, 0xa0, 0xfe, 0x63, 0x4d, 0x74, 0x4b, 0x9f, 0xfc, 0x6b,
		0xf1, 0x22, 0xa6, 0x3b, 0x9d, 0x96, 0x3f, 0x2f, 0x1b, 0x21, 0x41, 0x93, 0x94, 0x41, 0x0a, 0x5d,
		0x50, 0x06, 0xaa, 0x3e, 0x2b, 0x03, 0x55, 0x1f, 0x19, 0xa8, 0x90, 0x81, 0x2a, 0xb6, 0x20, 0x32,
		0x50, 0x41, 0x84, 0x0b, 0x11, 0x2e, 0xa6, 0x1f, 0x98, 0x7e, 0xd4, 0x5d, 0x40, 0xd1, 0xaf, 0xb0,
		0x08, 0xf7, 0xfc, 0x7e, 0xa8, 0x2a, 0x03, 0x4d, 0xb9, 0xba, 0x50, 0x9e, 0x8f, 0xbe, 0xa8, 0xa7,
		0xdd, 0x87, 0xe6, 0x79, 0xb3, 0xb1, 0xfd, 0xdd, 0x79, 0xf3, 0x8b, 0x7a, 0xda, 0x7b, 0x68, 0x34,
		0x62, 0x7e, 0x79, 0x1a, 0x77, 0x8d, 0xe6, 0x7d, 0xa3, 0xd1, 0xf0, 0xc5, 0x12, 0x1b, 0x02, 0x8a,
		0xa1, 0xda, 0x1e, 0x3d, 0x5d, 0x7e, 0xf4, 0xfe, 0x1f, 0x48, 0x30, 0x48, 0x85, 0x9b, 0x90, 0xf2,
		0xc2, 0x9c, 0xc2, 0x9c, 0xd6, 0xdd, 0x9c, 0xd6, 0x45, 0x8f, 0x56, 0x35, 0xe3, 0xda, 0x08, 0xcb,
		0xda, 0x16, 0x7f, 0xbf, 0x74, 0x1e, 0x9a, 0xf7, 0x8d, 0xf6, 0x50, 0x55, 0xda, 0x81, 0xc4, 0xad,
		0xbd, 0xb8, 0xc8, 0x93, 0x4a, 0xdb, 0x62, 0xe8, 0x83, 0x61, 0x8f, 0x61, 0x8f, 0x61, 0x8f, 0x61,
		0x8f, 0x21, 0x3a, 0x86, 0x5d, 0x86, 0x5d, 0xae, 0xa0, 0x5d, 0x86, 0xe8, 0x98, 0x7d, 0x11, 0x88,
		0x8e, 0x13, 0x9b, 0x18, 0xa2, 0xe3, 0x02, 0x0d, 0x84, 0x78, 0x2d, 0x64, 0xdc, 0x8a, 0x8b, 0x2b,
		0xf7, 0xf7, 0x96, 0x71, 0xab, 0x8f, 0x8c, 0x5b, 0x59, 0x5c, 0x1e, 0x04, 0x10, 0x91, 0x71, 0x0b,
		0x19, 0xb7, 0x76, 0x37, 0x12, 0x32, 0x6e, 0x61, 0xac, 0xe6, 0x36, 0x56, 0x11, 0xec, 0xc7, 0xac,
		0x1b, 0xb3, 0xee, 0xa2, 0x57, 0x43, 0x11, 0xec, 0x47, 0xb0, 0x3f, 0xc5, 0xa8, 0x22, 0xd8, 0x0f,
		0x73, 0x0a, 0x73, 0x4a, 0x33, 0xa7, 0x08, 0x2e, 0x21, 0xb8, 0x84, 0x60, 0x3f, 0xec, 0x31, 0xec,
		0x31, 0xec, 0x31, 0xec, 0x31, 0x82, 0xfd, 0x14, 0xa0, 0x22, 0xd8, 0x0f, 0xbb, 0x8c, 0x60, 0x3f,
		0x1d, 0xeb, 0x08, 0xf6, 0x8b, 0x5e, 0x07, 0xc1, 0xfe, 0xd4, 0x26, 0x46, 0xb0, 0x3f, 0xb7, 0x5a,
		0xc8, 0x30, 0x06, 0x52, 0x06, 0x29, 0x57, 0x83, 0x94, 0x91, 0x61, 0x0c, 0x19, 0xc6, 0x30, 0xea,
		0x25, 0x64, 0x18, 0x23, 0xc9, 0xd5, 0x90, 0x61, 0x0c, 0x4c, 0x8f, 0x31, 0x5f, 0x4d, 0xa6, 0x47,
		0x86, 0xb1, 0xb2, 0x8a, 0x80, 0x91, 0x61, 0x2c, 0x69, 0x8a, 0x7f, 0x14, 0x19, 0xc6, 0xfa, 0xc5,
		0x65, 0x18, 0xeb, 0x17, 0x91, 0x61, 0x8c, 0xa6, 0x13, 0x65, 0xe9, 0x43, 0xd9, 0x39, 0xc6, 0x3a,
		0x85, 0xe6, 0x18, 0xab, 0x73, 0x82, 0xb1, 0xd2, 0x64, 0x17, 0x33, 0xcc, 0x89, 0x2e, 0xb2, 0x3d,
		0x60, 0x59, 0xad, 0x56, 0x5b, 0x03, 0x8e, 0x59, 0x6b, 0x5c, 0xbd, 0x4d, 0x01, 0xec, 0x50, 0x86,
		0x40, 0x08, 0x43, 0x30, 0x74, 0x21, 0xe0, 0x21, 0x66, 0x09, 0x55, 0x64, 0x0d, 0x51, 0xe4, 0xb6,
		0x5c, 0x9e, 0x7d, 0x99, 0x5c, 0x20, 0x14, 0x91, 0x29, 0x04, 0x11, 0x34, 0xdd, 0x60, 0x30, 0x18,
		0x54, 0xbf, 0xf5, 0x0a, 0x72, 0xee, 0x47, 0xfb, 0xdc, 0xb1, 0x66, 0x9a, 0xba, 0xa5, 0xdc, 0x4d,
		0x35, 0x53, 0x31, 0x26, 0x22, 0xb4, 0x14, 0xae, 0x0e, 0x7a, 0x02, 0x3d, 0x1d, 0x88, 0x9e, 0x78,
		0x10, 0x0c, 0xc3, 0xb0, 0x5f, 0x5b, 0x7e, 0x6a, 0x83, 0x9f, 0x44, 0x9b, 0xae, 0xab, 0x0e, 0xba,
		0xe0, 0xa7, 0x12, 0xf0, 0xd3, 0x8d, 0x37, 0x48, 0x99, 0xb4, 0xb4, 0xac, 0x05, 0x36, 0x02, 0x1b,
		0x1d, 0x88, 0x8d, 0xc2, 0x6b, 0x5d, 0x0a, 0x03, 0x8c, 0xa2, 0xeb, 0xce, 0xcc, 0xf5, 0xe6, 0x7c,
		0x86, 0xe6, 0xcc, 0x75, 0xb2, 0xb8, 0x8e, 0x9b, 0xd5, 0x31, 0x58, 0x31, 0x58, 0xe1, 0x3a, 0xc2,
		0x75, 0x84, 0xeb, 0x08, 0xd7, 0x31, 0x27, 0x7e, 0x62, 0xea, 0x21, 0xc5, 0x74, 0x90, 0x60, 0x24,
		0x30, 0x52, 0xfe, 0xee, 0x23, 0x57, 0xa1, 0xc8, 0x54, 0x26, 0xe6, 0x97, 0x38, 0x87, 0xa9, 0x40,
		0x14, 0x57, 0x1e, 0x56, 0xe4, 0xbc, 0x1c, 0x8c, 0xb3, 0xfd, 0x8f, 0xb3, 0xbd, 0xaa, 0x57, 0xc4,
		0xe4, 0x80, 0xf9, 0x0d, 0x38, 0x57, 0x70, 0xb0, 0xb9, 0x36, 0x08, 0x0d, 0x03, 0xed, 0x50, 0x84,
		0x26, 0x24, 0xc4, 0x2b, 0xc7, 0x42, 0x48, 0xf9, 0xb5, 0x54, 0x04, 0x2d, 0x5d, 0x82, 0xe2, 0xe9,
		0x84, 0xf1, 0x5e, 0x81, 0x56, 0x2e, 0x41, 0x8c, 0x42, 0xd3, 0xc7, 0xd1, 0x75, 0x71, 0x5b, 0x7a,
		0xb8, 0xae, 0x9a, 0xb4, 0x5b, 0x8d, 0xa6, 0x84, 0xdb, 0xf5, 0x76, 0xc4, 0xde, 0x12, 0xea, 0x25,
		0x39, 0x51, 0x59, 0xc6, 0x15, 0xb9, 0xc5, 0xf7, 0x76, 0xb4, 0x2f, 0x37, 0xbf, 0xd9, 0x7a, 0xef,
		0x55, 0x6f, 0x2e, 0x6f, 0xbc, 0xf5, 0x53, 0x62, 0x27, 0xa6, 0x77, 0xde, 0x56, 0xa7, 0xb5, 0x9f,
		0x74, 0xbb, 0xfd, 0xb3, 0x6e, 0x57, 0x3d, 0x7b, 0x7c, 0xa6, 0x0e, 0x7a, 0xbd, 0x76, 0xbf, 0x1d,
		0xd3, 0x89, 0xc9, 0x9d, 0xb7, 0xfd, 0xf0, 0x29, 0x9d, 0x45, 0xed, 0xa4, 0x98, 0x7e, 0xa1, 0xf5,
		0xc7, 0x66, 0x17, 0xac, 0x1b, 0x3a, 0xf4, 0x9c, 0xb2, 0xa9, 0x3b, 0x1f, 0x66, 0xd6, 0x8d, 0x62,
		0x98, 0xb6, 0xa3, 0x99, 0x31, 0x14, 0xb4, 0x26, 0xb6, 0xed, 0x92, 0xdb, 0x5d, 0x15, 0xeb, 0xfd,
		0xee, 0x24, 0xdf, 0x24, 0x92, 0xdd, 0x24, 0x53, 0x33, 0x8e, 0x49, 0xd3, 0x18, 0x93, 0xcc, 0x8c,
		0x64, 0x06, 0x8c, 0x32, 0x9d, 0x19, 0x43, 0x73, 0xc9, 0x70, 0xde, 0x25, 0xc1, 0x4b, 0x3b, 0xd0,
		0x93, 0x76, 0x80, 0x67, 0xca, 0x04, 0x24, 0xd5, 0x0f, 0xa2, 0xf8, 0x3d, 0x84, 0xae, 0xe1, 0x3a,
		0x35, 0x6c, 0x27, 0x86, 0xed, 0xb4, 0xd0, 0xba, 0x4e, 0x8c, 0x6f, 0xd2, 0x54, 0x95, 0x44, 0x35,
		0x25, 0x4b, 0x45, 0x49, 0x74, 0x80, 0xf7, 0x70, 0xf0, 0xaf, 0x59, 0x57, 0x45, 0xae, 0x59, 0xb8,
		0x1c, 0x97, 0xec, 0xaa, 0xf2, 0xf5, 0x8d, 0x0c, 0x5d, 0x23, 0x73, 0xd1, 0x9f, 0xe1, 0x58, 0x8b,
		0x2c, 0xf2, 0x8b, 0xea, 0x16, 0x33, 0x2f, 0x4b, 0x8b, 0x2f, 0x47, 0x73, 0x36, 0xc5, 0x89, 0x2c,
		0xde, 0x67, 0x4e, 0x85, 0x70, 0xc8, 0xb6, 0xc9, 0x69, 0x86, 0x33, 0x2a, 0xe2, 0x34, 0xf6, 0xc0,
		0x4b, 0x62, 0x98, 0xe6, 0x74, 0x4f, 0x59, 0x2a, 0xd5, 0xb9, 0xec, 0x30, 0xcf, 0xc2, 0xe6, 0x99,
		0xbc, 0x5b, 0xc2, 0x77, 0xc2, 0x99, 0x0b, 0x5e, 0x31, 0x33, 0x9a, 0xea, 0x2e, 0x77, 0x99, 0xc7,
		0xba, 0xd6, 0x65, 0x22, 0x72, 0xb3, 0xf7, 0x05, 0xab, 0xdd, 0x4b, 0x02, 0x62, 0xeb, 0x3c, 0xfc,
		0xf5, 0x9e, 0x4c, 0x4b, 0x08, 0x62, 0xeb, 0x41, 0xfb, 0x5c, 0xcd, 0xdb, 0x9e, 0xe8, 0xb7, 0x22,
		0x5f, 0xac, 0xce, 0xc2, 0x20, 0xf2, 0xe1, 0x8e, 0x15, 0x8b, 0x57, 0xde, 0x65, 0x5f, 0xf8, 0x57,
		0x7d, 0xb7, 0xfd, 0x6f, 0xcf, 0x8e, 0xed, 0x5a, 0xce, 0xc8, 0xc7, 0x0b, 0x20, 0x69, 0x37, 0x39,
		0x9a, 0x4d, 0x4c, 0xcd, 0x8e, 0x72, 0x6a, 0x66, 0x1a, 0x54, 0x0d, 0x25, 0x27, 0x64, 0x40, 0x0c,
		0x15, 0x88, 0x41, 0x9f, 0xe4, 0xb7, 0x70, 0xfc, 0x15, 0x40, 0xff, 0x38, 0xa1, 0x4f, 0xf3, 0x64,
		0x39, 0x29, 0x7b, 0xe5, 0x97, 0xab, 0x1c, 0xae, 0xe5, 0x5a, 0x95, 0x68, 0x63, 0x55, 0x62, 0xbb,
		0x49, 0x3a, 0xbd, 0x23, 0x5c, 0x8e, 0x20, 0x20, 0x98, 0x9b, 0x64, 0x5a, 0x1e, 0x5e, 0x28, 0x7f,
		0x6a, 0xca, 0x67, 0x55, 0x19, 0x48, 0x5f, 0xfd, 0xfc, 0xf5, 0x37, 0xdf, 0xfe, 0xf5, 0xd6, 0x55,
		0xd5, 0x4e, 0xbf, 0xd1, 0xbc, 0xff, 0xe1, 0xa7, 0xbf, 0xff, 0x79, 0x74, 0xfa, 0x5d, 0xeb, 0xdd,
		0xf9, 0x8f, 0x4f, 0x95, 0xd1, 0xf7, 0xf2, 0x41, 0x96, 0x4b, 0x2c, 0x4f, 0x0b, 0x6f, 0x30, 0xbc,
		0xa5, 0x75, 0x15, 0xf0, 0x06, 0x78, 0x23, 0xba, 0x9a, 0xc6, 0x39, 0xdb, 0x2b, 0x60, 0x0f, 0xc2,
		0x96, 0xec, 0xd5, 0xb3, 0xe4, 0xce, 0x1d, 0xa1, 0x54, 0xf6, 0x5d, 0x81, 0x93, 0x9a, 0x44, 0x92,
		0xd6, 0x0b, 0x27, 0xab, 0x97, 0xfd, 0x84, 0xef, 0xf7, 0xc3, 0xb6, 0x32, 0xf0, 0x13, 0xc3, 0xb7,
		0x97, 0x7f, 0xbc, 0xcf, 0xe1, 0x84, 0xf1, 0x7e, 0x12, 0xf9, 0x20, 0xa9, 0x3c, 0xbb, 0xa2, 0x9c,
		0xb7, 0xb8, 0xfa, 0xb4, 0xc0, 0xae, 0xeb, 0x57, 0xa0, 0xeb, 0xea, 0x7b, 0x98, 0xd6, 0xe8, 0xd0,
		0x21, 0x81, 0xbd, 0xc9, 0x6d, 0xa8, 0xcb, 0x28, 0x3c, 0xd9, 0x0d, 0x6d, 0xd1, 0x84, 0x2c, 0xbe,
		0x89, 0x11, 0x56, 0x24, 0xce, 0x0b, 0x29, 0x5e, 0x7f, 0x0a, 0x9f, 0x43, 0x86, 0x50, 0x84, 0x0c,
		0x21, 0x95, 0x7f, 0x19, 0x47, 0xe7, 0x52, 0x8e, 0xca, 0x8d, 0x39, 0x1a, 0x77, 0x09, 0x89, 0x0c,
		0xc0, 0x4b, 0xce, 0x5e, 0x46, 0xca, 0x5a, 0x46, 0x56, 0xc0, 0x74, 0x00, 0x3d, 0x28, 0x60, 0x30,
		0x67, 0xa8, 0xda, 0x9c, 0x01, 0x0a, 0x98, 0x63, 0x5e, 0x6b, 0x82, 0x02, 0x26, 0xd7, 0x25, 0x1d,
		0x28, 0x60, 0x60, 0x9e, 0x93, 0x6e, 0x09, 0x05, 0x4c, 0xce, 0x30, 0x13, 0x85, 0x5b, 0x66, 0xd8,
		0x65, 0x86, 0x5f, 0x36, 0x18, 0x32, 0x8d, 0x21, 0x14, 0x30, 0x50, 0xc0, 0x88, 0x37, 0xce, 0x7e,
		0x14, 0x30, 0xde, 0x1e, 0x5b, 0x03, 0xd2, 0x14, 0x90, 0x32, 0xa4, 0x29, 0xb9, 0x43, 0x1f, 0xd2,
		0x14, 0x40, 0x3f, 0x17, 0xe8, 0x43, 0x9a, 0x72, 0xc4, 0xcb, 0x05, 0x90, 0xa6, 0xec, 0x5c, 0xb9,
		0xaf, 0x97, 0x34, 0x85, 0x96, 0x44, 0x8b, 0x97, 0x3c, 0x0b, 0x8c, 0x71, 0x94, 0x8c, 0x41, 0x9e,
		0x1a, 0x12, 0xa7, 0x84, 0x10, 0x5b, 0x01, 0xd7, 0x65, 0xc0, 0x35, 0xc4, 0x56, 0xa4, 0x65, 0x40,
		0x88, 0xad, 0x72, 0xee, 0x3a, 0x88, 0xad, 0x8e, 0x5a, 0x6c, 0x95, 0x72, 0x56, 0x1d, 0x31, 0x35,
		0x23, 0x3f, 0x25, 0x23, 0xe2, 0x4f, 0x35, 0x60, 0xb9, 0x7d, 0xae, 0xe4, 0x52, 0xb3, 0x25, 0x8a,
		0x63, 0xdd, 0x65, 0xe2, 0xdc, 0xb5, 0xe1, 0xc9, 0xc1, 0x93, 0x8b, 0xb6, 0x38, 0x2b, 0x4f, 0xe1,
		0x7e, 0x57, 0x74, 0x4b, 0x24, 0xad, 0x4d, 0x48, 0x38, 0x88, 0x14, 0x74, 0x59, 0x5b, 0x97, 0x96,
		0x90, 0x2e, 0x45, 0xa9, 0x4c, 0x49, 0x4e, 0x67, 0x7f, 0xb2, 0x1d, 0xfd, 0x76, 0x77, 0x4a, 0x3a,
		0xff, 0xf7, 0x7d, 0x25, 0xa2, 0x8b, 0xbd, 0x9d, 0x54, 0x92, 0x64, 0x74, 0xfe, 0xc3, 0xe5, 0x95,
		0x90, 0x6e, 0x3e, 0xd5, 0x9c, 0xab, 0x99, 0x75, 0x9b, 0xae, 0xc7, 0x0d, 0x4a, 0x96, 0x25, 0x29,
		0x9d, 0xfd, 0xc9, 0x56, 0x96, 0x0f, 0x55, 0x51, 0x65, 0xee, 0xfa, 0xf9, 0xf7, 0x25, 0xd0, 0x4d,
		0xc9, 0x3e, 0x18, 0x69, 0xe6, 0xd4, 0x8d, 0x0b, 0xe5, 0xf2, 0xc1, 0x29, 0x80, 0xa8, 0xb2, 0x9b,
		0x42, 0x00, 0x4c, 0x3e, 0xde, 0x0a, 0x4e, 0x90, 0x2e, 0x0a, 0x76, 0xa2, 0xf0, 0xcb, 0x0c, 0xc3,
		0xcc, 0x70, 0xcc, 0x05, 0x96, 0xcc, 0x30, 0x58, 0xe1, 0x0a, 0x31, 0x0e, 0x10, 0xa5, 0xa3, 0x38,
		0x48, 0x1a, 0xa7, 0x2d, 0x09, 0x37, 0x9d, 0xa8, 0x6c, 0xbd, 0x8c, 0x6d, 0x88, 0xe3, 0x3a, 0xc1,
		0x4c, 0x60, 0xa6, 0x03, 0x32, 0xd3, 0x44, 0xbf, 0x33, 0x6a, 0x7c, 0x60, 0x27, 0xb6, 0x12, 0x60,
		0x70, 0x56, 0x77, 0x70, 0x32, 0x70, 0x28, 0x89, 0x06, 0x3a, 0x99, 0xfa, 0x43, 0xf8, 0x8d, 0x95,
		0xf5, 0x1b, 0xd9, 0xfa, 0xc5, 0x63, 0x72, 0x18, 0xf7, 0x21, 0x0d, 0xc8, 0x51, 0xf7, 0x78, 0x08,
		0x47, 0xf7, 0x4e, 0xb7, 0x6c, 0x43, 0xe4, 0x74, 0xd1, 0x55, 0x45, 0x30, 0x2a, 0x18, 0xf5, 0xc0,
		0x8c, 0x5a, 0xf5, 0xad, 0x7a, 0x79, 0x68, 0x18, 0xbc, 0xc8, 0x4e, 0xcb, 0xff, 0xb3, 0x0a, 0xb7,
		0xb4, 0x48, 0x8b, 0xf0, 0x52, 0x7c, 0x6c, 0xee, 0xcd, 0xf2, 0x5a, 0xef, 0xfc, 0x3f, 0xaf, 0xfd,
		0x4b, 0x26, 0x26, 0x0f, 0x4a, 0x6f, 0x8f, 0x34, 0x05, 0x84, 0xce, 0x13, 0x40, 0xe4, 0xbe, 0xc7,
		0xbc, 0x83, 0xf8, 0x42, 0xe1, 0xf6, 0x03, 0xf1, 0x05, 0xd0, 0x1a, 0x68, 0x2d, 0x57, 0x20, 0x4a,
		0x88, 0x2f, 0x60, 0x9e, 0x98, 0xd4, 0x74, 0x88, 0x2f, 0x94, 0x6a, 0xda, 0x85, 0xf8, 0x02, 0x98,
		0x09, 0xf1, 0x05, 0x42, 0x1d, 0xc4, 0x17, 0x30, 0x38, 0x31, 0x38, 0x0b, 0xc2, 0xa1, 0x84, 0xf8,
		0x02, 0xfc, 0xc6, 0xe4, 0xa6, 0x43, 0x7c, 0x21, 0xc1, 0x61, 0x44, 0x7c, 0x21, 0xf5, 0xf1, 0x89,
		0x79, 0x17, 0x22, 0x56, 0x8c, 0x94, 0x7f, 0x01, 0x7c, 0x0a, 0x3e, 0x3d, 0x86, 0xe8, 0x02, 0x69,
		0xf9, 0x9e, 0xbc, 0x53, 0x36, 0xe6, 0x0d, 0x89, 0x3b, 0x66, 0x23, 0x6f, 0x88, 0xf1, 0x86, 0xf1,
		0xb6, 0xe3, 0x89, 0x78, 0x31, 0xad, 0x35, 0x8e, 0xe9, 0xb1, 0x2d, 0xde, 0xa6, 0xdc, 0xfc, 0x87,
		0x9b, 0x2b, 0x38, 0xd4, 0x5c, 0x1b, 0xb4, 0x86, 0x61, 0x76, 0x68, 0x5a, 0x63, 0x6d, 0x11, 0xae,
		0xdc, 0x12, 0x0e, 0x64, 0x2d, 0x18, 0xa1, 0x70, 0x3c, 0x33, 0x8f, 0xb4, 0xb2, 0xca, 0x5a, 0x12,
		0x76, 0xee, 0xa7, 0x3f, 0xfb, 0xfe, 0x52, 0x10, 0xc4, 0x3f, 0x3d, 0xef, 0x2c, 0xaf, 0x78, 0x15,
		0x4e, 0x3e, 0x59, 0x0b, 0x44, 0x36, 0xfe, 0x6f, 0xbc, 0x13, 0x6d, 0x93, 0xff, 0xc6, 0x2b, 0xec,
		0xdc, 0xd2, 0x7f, 0x12, 0x7a, 0xc2, 0x5d, 0x4f, 0x26, 0x1b, 0xf6, 0x73, 0xed, 0x46, 0xff, 0x63,
		0x36, 0x8b, 0xda, 0x87, 0xed, 0xa7, 0x95, 0xc3, 0x3f, 0x6d, 0x3c, 0xd3, 0xb3, 0x65, 0xf8, 0xc2,
		0x7b, 0x90, 0x87, 0x93, 0x87, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
		0xe7, 0x9c, 0xa3, 0x80, 0x85, 0xd2, 0x01, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/interface/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_InterfaceKind)(0)),
	},
	"/interface/subinterface/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_SubinterfaceKind)(0)),
	},
	"/network-instance/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_NiKind)(0)),
	},
	"/system/platform/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_DeviceKind)(0)),
	},
}
